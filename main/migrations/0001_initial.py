# Generated by Django 2.1.1 on 2018-11-08 22:25

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
import django.db.models.deletion
import functools
import main.models
import utils.validators

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Analysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('s3_bucket', models.CharField(default='ryan.leenay-bucket', help_text='The Amazon S3 bucket that contains the FastQ files to be analyzed', max_length=80)),
                ('s3_prefix', models.CharField(default='Greg_CXCR4_iPSC', help_text='The S3 directory that contains the FastQ files to be analyzed', max_length=160)),
                ('results_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, help_text='Data returned by external service')),
                ('fastq_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list)),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=40, unique=True)),
                ('description', models.CharField(blank=True, max_length=65536)),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GuideDesign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('genome', models.CharField(choices=[('hg38', 'Homo sapiens - Human - UCSC Dec. 2013 (GRCh38/hg38)'), ('hg19', 'Homo sapiens - Human - UCSC Feb. 2009 (GRCh37/hg19)'), ('todo', 'TODO: more genomes')], default='hg38', max_length=80)),
                ('pam', models.CharField(choices=[('NGG', '20bp-NGG (SpCas9, SpCas9-HF1, eSpCas9, ...)')], default='NGG', help_text='Protospacer Adjacent Motif', max_length=80, verbose_name='PAM')),
                ('targets_raw', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=65536, validators=[utils.validators.validate_chr_or_seq_or_enst_or_gene]), help_text='Chromosome location, fasta sequence, ENST transcript ID, or\n            gene name. One per line. Append ",N" or ",C" to a line to tag at N or\n            C terminus.', size=None, validators=[utils.validators.validate_unique_set], verbose_name='Target regions')),
                ('target_locs', django.contrib.postgres.fields.ArrayField(base_field=main.models.ChrLocField(max_length=80, validators=[utils.validators.validate_chr]), size=None, validators=[utils.validators.validate_unique_set], verbose_name='Target chromosome locations')),
                ('target_seqs', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=65536, validators=[utils.validators.validate_seq]), size=None, validators=[utils.validators.validate_unique_set], verbose_name='Target sequences')),
                ('target_genes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=40, validators=[utils.validators.validate_gene]), size=None, verbose_name='Target gene symbols')),
                ('target_tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, choices=[('start_codon', 'Within 36bp after start codon (N-terminus)'), ('stop_codon', 'Within 36bp before or after stop codon (C-terminus)'), ('per_target', 'As specified per target ("N" or "C")')], max_length=40), blank=True, size=None, verbose_name='Target HDR tags')),
                ('hdr_tag', models.CharField(blank=True, choices=[('start_codon', 'Within 36bp after start codon (N-terminus)'), ('stop_codon', 'Within 36bp before or after stop codon (C-terminus)'), ('per_target', 'As specified per target ("N" or "C")')], help_text='Insert green protein by HDR (Homology Directed Repair). Requires ENST transcript IDs.', max_length=40, verbose_name='Insert tag by HDR')),
                ('guide_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, help_text='Data returned by external service')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Experiment')),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GuideSelection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('selected_guides', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Guides returned by Crispor. Filtered and ranked.', validators=[functools.partial(utils.validators.validate_num_wells, *(), **{'max': 288}), main.models.GuideSelection._validate_selected_guides])),
                ('guide_design', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.GuideDesign')),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrimerDesign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('primer_temp', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(58), django.core.validators.MaxValueValidator(62)], verbose_name='Primer melting temperature')),
                ('max_amplicon_length', models.IntegerField(default=400, help_text='amplicon = primer product', validators=[django.core.validators.MinValueValidator(200), django.core.validators.MaxValueValidator(400)], verbose_name='Maximum amplicon length')),
                ('primer_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, help_text='Data returned by external service')),
                ('guide_selection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.GuideSelection')),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrimerSelection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('selected_primers', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Primers returned by Crispor, grouped by guide, forward primer then reverse primer', validators=[functools.partial(utils.validators.validate_num_wells, *(), **{'max': 384}), main.models.PrimerSelection._validate_selected_primers])),
                ('primer_design', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.PrimerDesign')),
            ],
            options={
                'ordering': ['-id'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Researcher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('update_time', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(max_length=40)),
                ('last_name', models.CharField(max_length=40)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='researcher',
            unique_together={('first_name', 'last_name')},
        ),
        migrations.AddField(
            model_name='analysis',
            name='experiment',
            field=models.ForeignKey(help_text='The CrispyCrunch experiment to be analyzed', on_delete=django.db.models.deletion.CASCADE, to='main.Experiment'),
        ),
    ]
